https://medium.com/@bartwijnants/using-prettier-and-husky-to-make-your-commits-save-2960f55cd351


Cmd:
prettier --single-quote --write "C:\Temp\my-angular8dot2-app\testCheckinFile.html"

==============================================================================================


C:\Temp\my-angular8dot2-app>npm install pretty-quick husky --save-dev
C:\Temp\my-angular8dot2-app>npm install prettier --save-dev
C:\Temp\my-angular8dot2-app>npm install npm-run-all --save-dev
C:\Temp\my-angular8dot2-app>prettier --single-quote --write "C:\Temp\my-angular8dot2-app\testCheckinFile.html"
                                        << Ensure the Emmet generated file is unformattted.

C:\Temp\my-angular8dot2-app>npx mrm lint-staged


Prettier-quick test Scenario:
---------------------------------------
Scenario 1:
app.module.ts file:       unformatted               staged          existing
testCheckInFile.html:     unformatted               unstaged        new
Result:
app.module.ts:            formatted                 committed       existing
testCheckInfile.html      unformatted (untouched)   unstaged        new


Scenario 2:
app.module.ts file:       unformatted               staged          existing
testCheckInFile.html:     unformatted               unstaged        existing
testCheckInFile1.html:    unformatted               unstaged        new
Result:
app.module.ts:            formatted                 committed       existing
testCheckInFile.html:     unformatted               unstaged        existing
testCheckInfile1.html     unformatted (untouched)   unstaged        new


Conclusion: pretty-quick is already doing what we want.
But we will need to install npm-run-all if we want both prettier and lint run together.


lint-staged test Scenario:
---------------------------------------
Scenario 1:
app.module.ts file:       unformatted               staged          existing
testCheckInFile.html:     unformatted               unstaged        existing
testCheckInFile1.html:    unformatted               unstaged        new
Result:
app.module.ts:            formatted                 committed       existing
testCheckInFile.html:     unformatted               unstaged        existing
testCheckInfile1.html     unformatted (untouched)   unstaged        new

Conclusion: lint-staged does the same result as pretty-quick.
And you don't install npm-run-all if we want both prettier and lint run together.



BOTH SOLUTIONS ARE OK!!!
So we don't need to use nx's format:fix for this??
      << Or you can test whether it does for stage files only and if yes, then use it. I would say it's better use prettier-quick or lint-staged



http://json.schemastore.org/prettierrc:
------------------
        "htmlWhitespaceSensitivity": {
          "description": "How to handle whitespaces in HTML.",
          "default": "css",
          "oneOf": [
            {
              "enum": ["css"],
              "description": "Respect the default value of CSS display property."
            },
            {
              "enum": ["strict"],
              "description": "Whitespaces are considered sensitive."
            },
            {
              "enum": ["ignore"],
              "description": "Whitespaces are considered insensitive."
            }
          ]
        },
        "parser": {
          "description": "Which parser to use.",
          "oneOf": [
            { "enum": ["flow"], "description": "Flow" },
            { "enum": ["babel"], "description": "JavaScript" },
            { "enum": ["babel-flow"], "description": "Flow" },
            { "enum": ["typescript"], "description": "TypeScript" },
            { "enum": ["css"], "description": "CSS" },
            { "enum": ["less"], "description": "Less" },
            { "enum": ["scss"], "description": "SCSS" },
            { "enum": ["json"], "description": "JSON" },
            { "enum": ["json5"], "description": "JSON5" },
            { "enum": ["json-stringify"], "description": "JSON.stringify" },
            { "enum": ["graphql"], "description": "GraphQL" },
            { "enum": ["markdown"], "description": "Markdown" },
            { "enum": ["mdx"], "description": "MDX" },
            { "enum": ["vue"], "description": "Vue" },
            { "enum": ["yaml"], "description": "YAML" },
            { "enum": ["html"], "description": "HTML" },
            { "enum": ["angular"], "description": "Angular" },
            { "enum": ["lwc"], "description": "Lightning Web Components" }
          ]
        },
